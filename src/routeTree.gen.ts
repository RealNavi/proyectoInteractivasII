/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ReportProblemRouteImport } from './routes/report-problem'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PasswordRouteImport } from './routes/password'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as NewpasswordRouteImport } from './routes/newpassword'
import { Route as MedicinesRouteImport } from './routes/medicines'
import { Route as MedicalregisterRouteImport } from './routes/medicalregister'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HelpRouteImport } from './routes/help'
import { Route as ConfigNotificationsRouteImport } from './routes/config-notifications'
import { Route as IndexRouteImport } from './routes/index'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportProblemRoute = ReportProblemRouteImport.update({
  id: '/report-problem',
  path: '/report-problem',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordRoute = PasswordRouteImport.update({
  id: '/password',
  path: '/password',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const NewpasswordRoute = NewpasswordRouteImport.update({
  id: '/newpassword',
  path: '/newpassword',
  getParentRoute: () => rootRouteImport,
} as any)
const MedicinesRoute = MedicinesRouteImport.update({
  id: '/medicines',
  path: '/medicines',
  getParentRoute: () => rootRouteImport,
} as any)
const MedicalregisterRoute = MedicalregisterRouteImport.update({
  id: '/medicalregister',
  path: '/medicalregister',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const ConfigNotificationsRoute = ConfigNotificationsRouteImport.update({
  id: '/config-notifications',
  path: '/config-notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/config-notifications': typeof ConfigNotificationsRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/medicalregister': typeof MedicalregisterRoute
  '/medicines': typeof MedicinesRoute
  '/newpassword': typeof NewpasswordRoute
  '/notifications': typeof NotificationsRoute
  '/password': typeof PasswordRoute
  '/profile': typeof ProfileRoute
  '/report-problem': typeof ReportProblemRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/config-notifications': typeof ConfigNotificationsRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/medicalregister': typeof MedicalregisterRoute
  '/medicines': typeof MedicinesRoute
  '/newpassword': typeof NewpasswordRoute
  '/notifications': typeof NotificationsRoute
  '/password': typeof PasswordRoute
  '/profile': typeof ProfileRoute
  '/report-problem': typeof ReportProblemRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/config-notifications': typeof ConfigNotificationsRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/medicalregister': typeof MedicalregisterRoute
  '/medicines': typeof MedicinesRoute
  '/newpassword': typeof NewpasswordRoute
  '/notifications': typeof NotificationsRoute
  '/password': typeof PasswordRoute
  '/profile': typeof ProfileRoute
  '/report-problem': typeof ReportProblemRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/config-notifications'
    | '/help'
    | '/login'
    | '/medicalregister'
    | '/medicines'
    | '/newpassword'
    | '/notifications'
    | '/password'
    | '/profile'
    | '/report-problem'
    | '/search'
    | '/settings'
    | '/signin'
    | '/signup'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/config-notifications'
    | '/help'
    | '/login'
    | '/medicalregister'
    | '/medicines'
    | '/newpassword'
    | '/notifications'
    | '/password'
    | '/profile'
    | '/report-problem'
    | '/search'
    | '/settings'
    | '/signin'
    | '/signup'
    | '/terms'
  id:
    | '__root__'
    | '/'
    | '/config-notifications'
    | '/help'
    | '/login'
    | '/medicalregister'
    | '/medicines'
    | '/newpassword'
    | '/notifications'
    | '/password'
    | '/profile'
    | '/report-problem'
    | '/search'
    | '/settings'
    | '/signin'
    | '/signup'
    | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigNotificationsRoute: typeof ConfigNotificationsRoute
  HelpRoute: typeof HelpRoute
  LoginRoute: typeof LoginRoute
  MedicalregisterRoute: typeof MedicalregisterRoute
  MedicinesRoute: typeof MedicinesRoute
  NewpasswordRoute: typeof NewpasswordRoute
  NotificationsRoute: typeof NotificationsRoute
  PasswordRoute: typeof PasswordRoute
  ProfileRoute: typeof ProfileRoute
  ReportProblemRoute: typeof ReportProblemRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/report-problem': {
      id: '/report-problem'
      path: '/report-problem'
      fullPath: '/report-problem'
      preLoaderRoute: typeof ReportProblemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password': {
      id: '/password'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof PasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/newpassword': {
      id: '/newpassword'
      path: '/newpassword'
      fullPath: '/newpassword'
      preLoaderRoute: typeof NewpasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/medicines': {
      id: '/medicines'
      path: '/medicines'
      fullPath: '/medicines'
      preLoaderRoute: typeof MedicinesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/medicalregister': {
      id: '/medicalregister'
      path: '/medicalregister'
      fullPath: '/medicalregister'
      preLoaderRoute: typeof MedicalregisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/config-notifications': {
      id: '/config-notifications'
      path: '/config-notifications'
      fullPath: '/config-notifications'
      preLoaderRoute: typeof ConfigNotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigNotificationsRoute: ConfigNotificationsRoute,
  HelpRoute: HelpRoute,
  LoginRoute: LoginRoute,
  MedicalregisterRoute: MedicalregisterRoute,
  MedicinesRoute: MedicinesRoute,
  NewpasswordRoute: NewpasswordRoute,
  NotificationsRoute: NotificationsRoute,
  PasswordRoute: PasswordRoute,
  ProfileRoute: ProfileRoute,
  ReportProblemRoute: ReportProblemRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
